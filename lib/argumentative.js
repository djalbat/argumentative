'use strict';

function parseArgv(argv, abbreviations) {
  var interpreterPath = argv[0],
      filePath = argv[1],
      args = argv.slice(2),
      ///
  commands = [],
      optionMap = {},
      optionAbbreviationMap = abbreviations || {};

  args.forEach(function (argument) {
    ///
    var abbreviatedOptions = /^-[^-]+$/.test(argument),
        unabbreviatedOption = /^--[^-].+$/.test(argument);

    if (false) {
      ///
    } else if (abbreviatedOptions) {
      var index = argument.indexOf('=');

      if (index === -1) {
        var _optionNames = argument.split('');

        _optionNames.shift();

        _optionNames.forEach(function (optionName) {
          var optionValue = true;

          optionMap[optionName] = optionValue;
        });
      } else {
        var _optionNames2 = argument.substring(1, index).split(''),
            optionNamesLength = _optionNames2.length,
            lastOptionIndex = optionNamesLength - 1,
            lastOptionValue = argument.substring(index + 1);

        _optionNames2.forEach(function (optionName, index) {
          var optionValue = index === lastOptionIndex ? lastOptionValue : true;

          optionMap[optionName] = optionValue;
        });
      }
    } else if (unabbreviatedOption) {
      var optionName = void 0,
          optionValue = void 0;

      var _index = argument.indexOf('=');

      if (_index === -1) {
        optionName = argument.substring(2);

        optionValue = true;
      } else {
        optionName = argument.substring(2, _index);

        optionValue = argument.substring(_index + 1);
      }

      optionMap[optionName] = optionValue;
    } else {
      var command = toCamelCase(argument);

      commands.push(command);
    }
  });

  var abbreviatedOptionNames = Object.keys(optionAbbreviationMap); ///

  abbreviatedOptionNames.forEach(function (abbreviatedOptionName) {
    if (optionMap.hasOwnProperty(abbreviatedOptionName)) {
      var unAbbreviatedOptionName = optionAbbreviationMap[abbreviatedOptionName];

      if (optionMap.hasOwnProperty(unAbbreviatedOptionName)) {
        ///
      } else {
        optionMap[unAbbreviatedOptionName] = optionMap[abbreviatedOptionName];
      }

      delete optionMap[abbreviatedOptionName];
    }
  });

  var optionNames = Object.keys(optionMap),
      options = optionNames.reduce(function (options, optionName) {
    var optionValue = optionMap[optionName];

    optionName = toCamelCase(optionName); ///

    options[optionName] = optionValue;

    return options;
  }, {});

  return {
    args: args,
    options: options,
    commands: commands,
    filePath: filePath,
    interpreterPath: interpreterPath
  };
}

module.exports = {
  parseArgv: parseArgv
};

function toCamelCase(string) {
  return string.replace(/-(.)/g, function (match, character) {
    return character.toUpperCase();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,